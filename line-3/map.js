class InteractiveMap {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.svg = document.getElementById('mapSvg');
        this.placeholder = document.getElementById('placeholder');
        this.zoomInfo = document.getElementById('zoomInfo');
        
        this.scale = 1;
        this.translateX = 0;
        this.translateY = 0;
        this.minScale = 0.3;
        this.maxScale = 5;
        
        this.isDragging = false;
        this.lastMouseX = 0;
        this.lastMouseY = 0;
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Å—à—Ç–∞–±—É
         this.visibilityConfig = {
            // –ë—É–¥—ñ–≤–ª—ñ
            'PSK-buildings-big': { minScale: 1.0, transition: 'opacity 0.3s ease' },
			'hata-vedu': { minScale: 1.0, transition: 'opacity 0.3s ease' },
			'school': { minScale: 0.9, transition: 'opacity 0.3s ease' },
            'PSK-buildings-small': { minScale: 1.7, transition: 'opacity 0.3s ease' },
            'LSK-buildings-big': { minScale: 2.0, transition: 'opacity 0.3s ease' },
            'LSK-buildings-small': { minScale: 2.3, transition: 'opacity 0.3s ease' },
            
            // –î–µ—Ä–µ–≤–∞
            'trees-big': { minScale: 1.1, transition: 'opacity 0.3s ease' },
            'trees-small': { minScale: 1.7, transition: 'opacity 0.3s ease' },
            'trees-extra-small': { minScale: 2.5, transition: 'opacity 0.3s ease' },
			'fields': { minScale: 0.9, transition: 'opacity 0.3s ease' },
			'paluba': { minScale: 1.1, transition: 'opacity 0.3s ease' },
            
            // –î–æ—Ä–æ–≥–∏
            'PSK-roads': { minScale: 0.7, transition: 'opacity 0.3s ease' },
            'LSK-roads': { minScale: 0.8, transition: 'opacity 0.3s ease' },
            'PSK-roads-small': { minScale: 1.0, transition: 'opacity 0.3s ease' },
            
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
            'golku-big': { minScale: 0.8, transition: 'opacity 0.3s ease' },
            'golku-small': { minScale: 1.2, transition: 'opacity 0.3s ease' },
            'stones-big': { minScale: 0.9, transition: 'opacity 0.3s ease' },
            'stones-small': { minScale: 2.0, transition: 'opacity 0.3s ease' },
            'lore-chair': { minScale: 1.5, transition: 'opacity 0.3s ease' },
            'willow': { minScale: 0.9, transition: 'opacity 0.3s ease' },
            'gravestones': { minScale: 2.5, transition: 'opacity 0.3s ease' },
            'radioactive': { minScale: 0.8, transition: 'opacity 0.3s ease' },
            'skulls': { minScale: 1.2, transition: 'opacity 0.3s ease' },
			'markers-small': { minScale: 0.6, transition: 'opacity 0.3s ease' },
            'bones': { minScale: 1.0, transition: 'opacity 0.3s ease' },
			'metaphorosnics': { minScale: 0.7, transition: 'opacity 0.3s ease' },
			'reiku': { minScale: 0.4, transition: 'opacity 0.3s ease' },
			
			// –ù–∞–ø–∏—Å–∏ (–∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—Ä–∏ –∑–º–µ–Ω—à–µ–Ω–Ω—ñ, –∑–Ω–∏–∫–∞—é—Ç—å –ø—ñ—Å–ª—è maxScale 0.6)
            'PSK-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' },
            'LSK-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' },
            'forest-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' },
            'lake-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' },
            'desert-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' },
            'graveyard-label': { maxScale: 0.6, transition: 'opacity 0.3s ease' }
        };
        
        // –ï–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è —Å—Ç–∞–ª–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        this.fixedSizeElements = [
            'paluba-mark',
			'halabuda-mark',
			'bus-stop-mark',
			'factory-mark',
			'bus-stop-end-mark',
			'school-mark',
			'pencil-shop-mark',
			'zatoka-mark',
			'bridge-mark',
			'klocha-tree-mark',
			'tech-shop-mark',
			'graveyard-mark',
			'orden-mark',
			'stones-mark',
			'radioactive-mark',
			'fate-mark',
			'veda-shop',
			'mail-mark',
			'library-mark',
			'mesnuk-mark',
			'river-mark',
			'timetrain-mark',
            'marker-klocha',
            'marker-perpere'
        ];
        
                // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞—Ä–∫–µ—Ä–∏
        this.markerInfo = {
            'paluba-mark': '–î—ñ–ª—è–Ω–∫–∞-–ø–∞–ª—É–±–∞ –∫–∞–ø—ñ—Ç–∞–Ω–∞ –í–æ. –í—Å–µ —Ä–æ—Å—Ç–µ –≤ —Å–∏–º–µ—Ç—Ä—ñ—ó, –≥–∞—Ä–º–æ–Ω—ñ—ó —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—ó üå±üçáüëí',
            'halabuda-mark': '–Ü–¥–µ–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ö–∞–ª–∞–±—É–¥–∏. –ô–æ–≥–æ –≤–∏—è–≤–∏–ª–∏ –û–∫—ñ –∑ –ü–µ—Ä-–ø–µ—Ä–µ –ø—ñ–¥ —á–∞—Å —Å–≤–æ—î—ó —Ç–∞—î–º–Ω–æ—ó –≤–µ—á—ñ—Ä–Ω—å–æ—ó –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ ü§çüçÉ‚ú®Ô∏è',
            'bus-stop-mark': '–ö–ª–æ—á–∞ –∑–∞–≤–∂–¥–∏ —á–µ–∫–∞—î —à–∫—ñ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ –Ω–∞ —Ü—ñ–π –∑—É–ø–∏–Ω—Ü—ñ ‚è≥',
            'factory-mark': '–ì–ª–æ–±–∞–ª—å–Ω–µ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ *999 –≤–∞–Ω—Ç–∞–∂—ñ–≤–æ–∫* ‚õΩ. –ü—ñ–¥ –∑–µ–º–ª–µ—é –ø—Ä–æ–ª—è–≥–∞—é—Ç—å –ø–æ–∫–ª–∞–¥–∏ AGI (—à—Ç—É—á–Ω–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É) ü§ñ',
            'bus-stop-end-mark': '–ö—ñ–Ω—Ü–µ–≤–∞ –∑—É–ø–∏–Ω–∫–∞ –º—ñ—Å—Ç–µ—á–∫–∞. –í –Ω–∞—Ä–æ–¥—ñ —ó—ó –Ω–∞–∑–∏–≤–∞—é—Ç—å –∑—É–ø–∏–Ω–∫–æ—é –∫—ñ–Ω—Ü—è —Å–≤—ñ—Ç—É ‚ò†Ô∏éÔ∏é',
            'school-mark': '–®–∫–æ–ª–∞ ‚Ññ1. –ö–ª–æ—á–∞ —Ö–æ–¥–∏—Ç—å —Ç—É–¥–∏, —ñ –π–æ–≥–æ –≤–ª–∞—Å–Ω–∞ –≤–∞–∫—É—É–º–Ω–∞ –±—É–ª—å–∫–∞ —Ä—è—Ç—É—î –π–æ–≥–æ –≤—ñ–¥ –Ω—É–¥—å–≥–∏ _-_üñã',
            'pencil-shop-mark': '–ú–∞–≥–∞–∑–∏–Ω *–û–ª—ñ–≤–µ—Ü—å*. –í–∏–≥–ª—è–¥–∞–∞—î, —è–∫ –≥—ñ–≥–∞–Ω—Ç—Å—å–∫–∏–π –æ–ª—ñ–≤–µ—Ü—å, —Ç–æ–º—É –æ—Å–æ–±–ª–∏–≤–∏–π ‚úê·ù∞',
            'zatoka-mark': '–£–ª—é–±–ª–µ–Ω–∞ —Ä–∏–±–Ω–∞ –∑–∞—Ç–æ–∫–∞ —Ç—ñ—Ç–∫–∏ –á—à—ñ. –Ü —Ä–∏–±–Ω–∞, —ñ —Ä–∏–±–æ–ª–æ–≤–Ω–∞ ü¶àüõ∂ ',
            'bridge-mark': '–ú—ñ—Å—Ç. –ü–µ—Ä–µ–ø—Ä–∞–≤–∞ –≤—ñ–¥ —Å–µ–ª–∞ –¥–æ –º—ñ—Å—Ç–µ—á–∫–∞ (—ñ –Ω–∞–≤–ø–∞–∫–∏)‚ï∞‚îà‚û§ÀéÀäÀó',
            'klocha-tree-mark': '–ú—ñ—â–∞–Ω—Å—å–∫–∞ —è–ª–∏—Ü—è, –Ω–∞ —è–∫—É –ö–ª–æ—á–∞ –∑–∞–≤—à–µ –∑–∏—Ä–∫–∞—î üëÄüå≤',
            'tech-shop-mark': '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –∫—Ä–∞–º–Ω–∏—á–∫–∞. –ü–µ—Ä-–ø–µ—Ä–µ —á–∞—Å—Ç–µ–Ω—å–∫–æ –±—ñ–≥–∞—î —Ç—É–¥–∏ –∑–∞ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∫–∞–º–∏ (–±–æ —ó—Ö –±–∞–≥–∞—Ç–æ –Ω–µ –±—É–≤–∞—î!) ‚õØüîß',
            'graveyard-mark': '–ì–æ–ª–∫–∏ —Å–æ—É–ª-–∑–≤*—è–∑–∫–∏. –ó–∞—ñ—Ä–∂–∞–≤—ñ–ª—ñ —É–ª–∞–º–∫–∏ —Å–ø–æ–≥–∞–¥—ñ–≤ –ø—Ä–æ –¥—ñ–æ–¥—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ—Ç–Ω—É–ª–∏ —Ç–æ—á–∫—É –Ω–µ–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.',
            'orden-mark': '"–í—ñ—á–Ω–æ—ó –ø–∞–º*—è—Ç—ñ –æ—Ä–¥–µ–Ω—É –ü—É—Ç–µ–≤—ñ–¥ (*—Ç–∏–º, —â–æ –≤–µ–¥—É—Ç—å –ø—É—Ç—å*), –∞–±–æ –•—Ä–∞–Ω–∏—Ç–µ–ª—è–º –ª–∞–¥—É". –¶—å–æ–º—É –Ω–∞–¥–≥—Ä–æ–±–∫–æ–≤—ñ –≤–∂–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –ø—ñ–≤—Ç–æ—Ä–∏ —Å—Ç–æ–ª—ñ—Ç—Ç—è üíÄ',
            'stones-mark': '–†—è–¥ –º—ñ—Å—Ç–∏—á–Ω–∏—Ö –∫–∞–º*—è–Ω–∏—Ö –±–æ–≤–≤–∞–Ω—ñ–≤. –°–ø–∏—Ç–∞–π –≤ –Ω–∏—Ö –¥–æ–∑–≤–æ–ª—É, —è–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–æ–±—Ä–∞—Ç–∏—Å—è —É –°–ø–æ–∫—ñ–π–Ω—É –¥–æ–ª–∏–Ω—É –±–µ–∑ –Ω–µ–ø—Ä–∏—î–º–Ω–∏—Ö –ø—Ä–∏–≥–æ–¥! üóø',
            'radioactive-mark': '–¢—É—Ç –∫–æ–ª–∏—Å—å –±—É–ª–æ –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ –º–µ—Ç–∞—Ñ–æ—Ä–æ–∑–Ω–∏–∫—ñ–≤ (–ø–æ–º–∏–ª–∫–æ–≤–æ –≤–∏–≤–µ–¥–µ–Ω–∏—Ö –¥—ñ–æ–¥—ñ–≤ –∑ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º –≤–∏–ø—Ä–æ–º—ñ–Ω–µ–Ω–Ω—è–º). –á—Ö–Ω—î –≤–∏–º–∏—Ä–∞–Ω–Ω—è —Å–ø—Ä–∏—á–∏–Ω–∏–ª–æ –ø–æ—á–∞—Ç–æ–∫ –ø–æ—Å—Ç–µ—Ä–∏ (–ø. –µ.) ñ•∏',
            'fate-mark': '–ö–∞–º*—è–Ω–∞ –ª–∞–≤–∞. –†–µ–∑–∏–¥–µ–Ω—Ü—ñ—è –ö–∞—Ä–¥–∏–Ω–∞–ª—ñ (–î–æ–ª—ñ). –¢—É—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞—é—Ç—å—Å—è —Å—É–≤–æ—ó —Ç–∞ –∑–∞–ø–ª—ñ—Ç–∞—é—Ç—å—Å—è –∂–∏—Ç—Ç—î–≤—ñ –ª—ñ–Ω—ñ—ó –¥—ñ–æ–¥—ñ–≤ ñ°é',
            'veda-shop': '–ö—Ä–∞–º–Ω–∏—á–∫–∞, —É —è–∫—ñ–π —Ç—ñ—Ç–∫–∞ –í–µ–¥–∞ –∑–∞–≤—à–µ –∫—É–ø—É—î –ø–∞–ø–µ—Ä–æ–≤—ñ —Å–µ—Ä–≤–µ—Ç–∫–∏ (—Ç–∞ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å–Ω—ñ —à—Ç—É–∫–∏) üß∫üßºü•£',
			'mail-mark': '–ü–æ—à—Ç–∞, –æ—Å–Ω–æ–≤–Ω–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è. –Ü—Å–Ω—É—î —Ç—ñ–ª—å–∫–∏ –¥–≤—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω—ñ —Ç–æ—á–∫–∏: –ü–°–ö —ñ –õ–°–ö üì¶',
			'library-mark': '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞. –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–∞–ª–µ–∫–æ –Ω–µ —Ç–∞–∫ –ø–∞—Ö–Ω–µ –∫–Ω–∏–∂–∫–æ–≤–∏–º –ø–∏–ª–æ–º, —ñ –Ω–µ —Ö–æ–≤–∞—î –ª–æ–≤—Ü—è —Å–Ω—ñ–≤ –Ω–∞–¥ —Å–≤–æ—ó–º–∏ –¥–≤–µ—Ä–º–∏. –ê–ª—Ö—ñ–º—ñ—á–Ω—ñ —Å–ª–æ–≤–Ω–∏—á–∫–∏ –ö–ª–æ—á—ñ –≤—Å—ñ –∑–≤—ñ–¥—Ç—ñ–ª—è üïÆ',
			'mesnuk-mark': '–ü—ñ–¥–∑–µ–º–µ–ª–ª—è –ú–µ—Å–Ω–∏–∫–∞. –ó –ø—ñ—Ä –Ω–∞—Å—Ç–∞–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä–∏ –Ω—ñ—Ö—Ç–æ –ø—Ä–æ –Ω—å–æ–≥–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–∞–∑—É –Ω–µ –∑–≥–∞–¥—É–≤–∞–≤. –Ü –Ω–µ –º—ñ–≥ –±–∏ –∑–≥–∞–¥–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å, —è–∫–±–∏ —Ö–æ—Ç—ñ–≤  üí•',
			'river-mark': '–í–æ–¥–∏ —Ä—ñ—á–∫–∏ –Ω–µ —Ä–æ–±–ª—è—Ç—å —Ü—é –ø—É—Å—Ç–µ–ª—é –º–µ–Ω—à –ø—É—Å—Ç–µ–ª—å–Ω–æ—é ‚ò¢Ô∏è',
			'timetrain-mark': '–¢—É—Ç –Ω–µ —ó–∑–¥–∏—Ç—å –Ω—ñ—Ö—Ç–æ, –æ–∫—Ä—ñ–º –ß–∞—Å–æ–ø–æ—Ç—è–≥–∞. –ó–¥–∞—î—Ç—å—Å—è, —â–æ –π–æ–≥–æ —Ä–µ–π–∫–∏ –ø—Ä–æ–Ω–∏–∑—É—é—Ç—å –≤—Å—é –ø–ª–∞–Ω–µ—Ç—É –¥—ñ–æ–¥—ñ–≤ –Ω–∞—Å–∫—Ä—ñ–∑—å ñ£ò',
            'marker-klocha': 'üè¢–ë—É–¥–∏–Ω–æ–∫ 35 (–∫–≤–∞—Ä—Ç–∏—Ä–∏ ‚Ññ‚Ññ215-219). –¢—É—Ç –º–µ—à–∫–∞—é—Ç—å –ö–ª–æ—á–∞ —Ç–∞ –π–æ–≥–æ —Ç—ñ—Ç–∫–∞ –á—à—ñ ü™≤‚òØ',
            'marker-perpere': 'üè°–•–∞—Ç–∞, –∫–∞–ø—ñ—Ç–∞–Ω–æ–º —è–∫–æ—ó —î —Ç—ñ—Ç–∫–∞ –í–µ–¥–∞. –ö–∞–∑–æ–≤–µ –≥–Ω—ñ–∑–¥–æ. –ú—ñ—Å—Ü–µ, –¥–µ –ø—Ä–∏—Ç–∞–∫–æ–≤–∏–ª–∏—Å—è –ü–µ—Ä-–ø–µ—Ä–µ —Ç–∞ –û–∫—ñ üîé‚öôÔ∏è‚ÅÇ'
        };
		
		// –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±'—î–∫—Ç–∏ –¥–ª—è objects-info
        this.objectsInfo = {
            'planet': '–û–≥–æ–ª–µ–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∏ –¥—ñ–æ–¥—ñ–≤',
            'forest': '–ì—Ä–∏–±–æ—á–∫–∏ –∫–ª–∏—á—É—Ç—å! (—Ç—ñ—Ç–∫—É –á—à—ñ)',
            'lake': '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–µ –¥—ñ–æ–¥—Å—å–∫–µ –º–æ—Ä–µ (—à—É–±–æ–≤—Å—Ç—å —É –º—É–ª)',
            'islands': '–ù–µ–≤–µ–ª–∏—á–∫—ñ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –æ—Å—Ç—Ä—ñ–≤—Ü—ñ, —è–∫—ñ –≤–∏—Å—è—Ç—å –Ω–∞–¥ –ü—Ä—ñ—Ä–≤–æ—é',
            'orden': '–ó–≤—ñ–¥–∫–∏ —Ä–æ—Å—Ç–µ —Ü–µ–π –Ω–∞–¥–≥—Ä–æ–±–æ–∫? –Ü–∑ —Å–∞–º–æ—ó –ü—Ä—ñ—Ä–≤–∏??',
            'PSK': '–ú—ñ—Å—Ç–µ—á–∫–æ (–æ–±–µ—Ä–µ–∂–Ω–æ, –ø—ñ–¥ –∑–µ–º–ª–µ—é –∫–æ–º–ø\'—é—Ç–µ—Ä–Ω–∞ —Ñ–µ—Ä–º–∞!)',
            'LSK': '–°—ñ–ª—å—Ü–µ (–ø–æ–±—ñ–≥–∞–π –ø–æ —Ç—Ä–∞–≤–∏—Ü—ñ!)',
            'fields': '–ü–æ–ª—è (–±–∞–∂–∞–Ω–æ –Ω–µ –∑–∞—Ç–æ–ø—Ç—É–≤–∞—Ç–∏)',
            'hashchi': '–•–∞—â—ñ, –∫—Ä—ñ–∑—å —è–∫—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–¥–µ—Ä—Ç–∏—Å—è',
            'PSK-roads': '–î–æ—Ä–æ–≥–∏ (–º—ñ—Å—Ç–µ—á–∫–æ–≤—ñ –≤–µ–Ω–∏)',
            'PSK-buildings-big': '–ë—É–¥—ñ–≤–ª—ñ (–ø–µ—Ä–µ—Å—É–≤–Ω—ñ –π –Ω–µ –¥—É–∂–µ)',
            'PSK-buildings-small': '–û—Ü—ñ –±—É–¥—ñ–≤–ª—ñ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ—Å—É–≤–Ω—ñ',
            'school': '–ë—É–ª–æ –± –Ω–µ–ø–æ–≥–∞–Ω–æ, —è–∫–±–∏ —Ü—è –±—É–¥—ñ–≤–ª—è –∫—É–¥–∏—Å—å –ø–æ–¥—ñ–ª–∞—Å—å',
            'LSK-roads': '–ì—Ä—É–Ω—Ç–æ–≤—ñ –¥–æ—Ä—ñ–∂–∫–∏ (–Ω—ñ—è–∫–∏—Ö –∞—Å—Ñ–∞–ª—å—Ç—ñ–≤!)',
            'LSK-buildings-small': '–Ñ —â–µ –º–µ–Ω—à—ñ —Ö–∞—Ç–∏–Ω–∫–∏ (–∞–ª–µ —ó—Ö —Ç—É—Ç –Ω–µ –≤–∏–¥–∫–æ)',
            'LSK-buildings-big': '–•–æ—á–µ—Ç—å—Å—è –ø–æ–±—É–≤–∞—Ç–∏ –≤—Å—é–¥–∏ –π –æ–¥—Ä–∞–∑—É!',
            'LSK-river': '–î–µ —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ —Ü–µ–π —Å—Ç—Ä—É–º–æ—á–æ–∫, –ü–µ—Ä-–ø–µ—Ä–µ?',
            'river': '–†—ñ—á–∫–∞ (–û–∫—ñ —Ç—É–¥–∏ –¥—É–∂–µ —Ö–æ—á–µ!)',
            'trees-extra-small': '–á—Ö —Ç–æ—á–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Å–∞–¥–∏–ª–∞ —Ç—ñ—Ç–∫–∞ –í–µ–¥–∞',
            'trees-small': '–ó–µ–ª–µ–Ω—ñ –¥—Ä—É–∑—ñ (–¥—ñ–æ–¥–∏ + –ø—Ä–∏—Ä–æ–¥–∞)',
            'trees-big': '–†–æ–∑—Ä–æ—Å–ª–∏—Å—è –≤–∂–µ..–∫–æ—Ä–µ–Ω–∏—Å—Ç—ñ, —è–∫ —Ç—ñ —Ç–µ–ø–ª–æ–≤—ñ –¥—ñ–æ–¥–∏',
            'PSK-roads-small': '–ú–∞—Å–∏–≤–Ω–∏–º –º–∞—à–∏–Ω–∞–º –≤–∞–∂–∫–æ —Ç—É—Ç —Ä–æ–∑–º–∏–Ω–∞—Ç–∏—Å—å',
            'reiku': '–¶–µ —Ä–µ–π–∫–∏ —á–∏ –ø—É—Å—Ç–µ–ª—å–Ω–∏–π –º—ñ—Ä–∞–∂?',
            'stones-big': '–î–∏–≤–Ω—ñ —à—Ç—É–∫–∏ —Ç—Ä–∞–ø–ª—è—é—Ç—å—Å—è –Ω–∞ –∫–ª–∞–¥–æ–≤–∏—â—ñ',
            'golku-big': '–Ü—Ä–∂–∞–≤—ñ, –∞–ª–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ –≥–æ—Å—Ç—Ä—ñ',
            'golku-small': '–ó–¥–∞—î—Ç—å—Å—è, —Ç–æ—Ä–∫–Ω–µ—à—Å—è - —ñ –∑–∞—Å–º–æ–∫—á–µ –¥—É—à—É –≤—Å–µ—Ä–µ–¥–∏–Ω—É',
            'lore-chair': '–¢—É—Ç –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è –¥–æ–ª—è —É—Å—ñ—Ö –Ω–∞—à–∏—Ö –∂–∏—Ç—Ç—î–≤–∏—Ö –ª—ñ–Ω—ñ–π',
            'willow': '–í—Å–æ—Ö–ª–∞ –í–µ—Ä–±–∞ (–±–µ–∑–º–æ–≤–Ω–∞ –ø–æ–¥—Ä—É–≥–∞ —Å–∞–º–æ—ó –ö–∞—Ä–¥–∏–Ω–∞–ª—ñ)',
            'skulls': '–ö—Ä–∞—â–µ —Ç—É—Ç –¥–æ–≤–≥–æ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏',
            'metaphorosnics': '–°–∏–º–≤–æ–ª –º–µ—Ç–∞—Ñ–æ—Ä–æ–∑–Ω–∏–∫—ñ–≤ (—Ç—Ä–∏–∫—É—Ç–Ω–∞ –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∞ –≤–∏–ª–∫–∞)',
            'gravestones': '–¢–∏—Ö—ñ—à–µ..—Ü—ñ –Ω–∞–¥–≥—Ä–æ–±–∫–∏ —á–∞—Å–æ–º –≤–∏–¥–∞—é—Ç—å –≤–∏—Ç—Ç—è',
            'bones': '–ß–∏—ó —Ü–µ –∫—ñ—Å—Ç–∫–∏? :–û',
			'PSK-wall': '–°—Ç—ñ–Ω–∞, —è–∫–∞ –∑–∞—Ö–∏—â–∞—î –º—ñ—Å—Ç–µ—á–∫–æ –≤—ñ–¥ –ü—Ä—ñ—Ä–≤–∏',
            'paluba': '–ó–∞—Ö–æ–¥—å –Ω–∞ –ø–∞–ª—É–±—É –æ–±–µ—Ä–µ–∂–Ω–æ!',
			'hata-vedu': '–ß–æ–º—É –¥—Ä–æ–≤—ñ—Ç–Ω—è –±—ñ–ª—è —Ö–∞—Ç–∏ –í–µ–¥–∏ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–∞?',
			'radioactive': '–†—ñ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ: –≤–∏—Å–æ–∫–∏–π. –û–¥—è–≥–∞–π —Å–∫–∞—Ñ–∞–Ω–¥—Ä!'
        }; 
        
        this.markerInfoDiv = document.getElementById('markerInfo');
        
        this.initEventListeners();
        this.initElementVisibility();
        this.initFixedSizeElements();
        this.initMarkerHover();
		this.initObjectsInfoHover(); // –î–æ–¥–∞–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é hover –¥–ª—è objects-info
    }
	
	    // –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó hover-–µ—Ñ–µ–∫—Ç—ñ–≤ objects-info
    initObjectsInfoHover() {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–ª–∞—Å–∏ –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ objects-info
        const objectClasses = Object.keys(this.objectsInfo);
        
        objectClasses.forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            
            elements.forEach(element => {
                // –î–æ–¥–∞—î–º–æ transition –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –∑–º—ñ–Ω–∏ brightness
                element.style.transition = 'all 0.3s ease';
                
                // –ü–æ–∫–∞–∑–∞—Ç–∏ objects-info —Ç–∞ –¥–æ–¥–∞—Ç–∏ brightness –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
                element.addEventListener('mouseenter', () => {
                    this.showObjectsInfo(className);
                    element.style.filter = 'saturate(123%)';
                });
                
                // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ objects-info —Ç–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ brightness –ø—Ä–∏ –≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—ñ
                element.addEventListener('mouseleave', () => {
                    this.hideObjectsInfo();
                    element.style.filter = 'saturate(100%)';
                });
            });
        });
    }
    
    // –î–æ–¥–∞–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É objects-info
    showObjectsInfo(className) {
        const info = this.objectsInfo[className];
        if (info && this.objectsInfo) {
            const objectsInfoElement = document.querySelector('.objects-info');
            if (objectsInfoElement) {
                objectsInfoElement.textContent = info;
                objectsInfoElement.style.display = 'block';
            }
        }
    }
    
    // –î–æ–¥–∞–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è objects-info
    hideObjectsInfo() {
        const objectsInfoElement = document.querySelector('.objects-info');
        if (objectsInfoElement) {
            objectsInfoElement.style.display = 'none';
        }
    }
    
    initMarkerHover() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è hover-–µ—Ñ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ä—ñ–≤
        Object.keys(this.markerInfo).forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            
            elements.forEach(element => {
                // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
                element.addEventListener('mouseenter', (e) => {
                    this.showMarkerInfo(className, e);
                });
                
                // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–∏ –≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—ñ
                element.addEventListener('mouseleave', () => {
                    this.hideMarkerInfo();
                });
                
                // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –ø—Ä–∏ —Ä—É—Å—ñ –º–∏—à—ñ
                element.addEventListener('mousemove', (e) => {
                    this.updateMarkerInfoPosition(e);
                });
            });
        });
    }
    
    showMarkerInfo(className, event) {
        const info = this.markerInfo[className];
        if (info && this.markerInfoDiv) {
            this.markerInfoDiv.textContent = info;
            this.markerInfoDiv.style.display = 'block';
            this.updateMarkerInfoPosition(event);
        }
    }
    
    hideMarkerInfo() {
        if (this.markerInfoDiv) {
            this.markerInfoDiv.style.display = 'none';
        }
    }
    
    updateMarkerInfoPosition(event) {
        if (this.markerInfoDiv && this.markerInfoDiv.style.display === 'block') {
            const rect = this.container.getBoundingClientRect();
            const x = event.clientX - rect.left + 15; // –ó–º—ñ—â–µ–Ω–Ω—è –Ω–∞ 15px –≤–ø—Ä–∞–≤–æ –≤—ñ–¥ –∫—É—Ä—Å–æ—Ä–∞
            const y = event.clientY - rect.top - 10; // –ó–º—ñ—â–µ–Ω–Ω—è –Ω–∞ 10px –≤–≥–æ—Ä—É –≤—ñ–¥ –∫—É—Ä—Å–æ—Ä–∞
            
            this.markerInfoDiv.style.left = x + 'px';
            this.markerInfoDiv.style.top = y + 'px';
        }
    } 
    
    initFixedSizeElements() {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–∞–ª–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        this.fixedSizeElements.forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            elements.forEach(element => {
                element.style.transition = 'transform 0.3s ease';
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ —Ä–æ–∑–º—ñ—Ä
                const bbox = element.getBBox();
                const centerX = bbox.x + bbox.width / 2;
                const centerY = bbox.y + bbox.height; 
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ transform-origin –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É –µ–ª–µ–º–µ–Ω—Ç–∞
                element.style.transformOrigin = `${centerX}px ${centerY}px`;
                element.style.transform = `scale(${1 / this.scale})`;
            });
        });
    }
    
    updateFixedSizeElements() {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–∞–ª–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        this.fixedSizeElements.forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            elements.forEach(element => {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π –∂–µ transform-origin, —â–æ –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                element.style.transform = `scale(${1 / this.scale})`;
            });
        });
    }
    
        initElementVisibility() {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        Object.keys(this.visibilityConfig).forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            const config = this.visibilityConfig[className];
            
            elements.forEach(element => {
                element.style.transition = config.transition;
                // –î–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ maxScale - –≤–∏–¥–∏–º—ñ –∫–æ–ª–∏ –º–∞—Å—à—Ç–∞–± –º–µ–Ω—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î maxScale
                // –î–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ minScale - –≤–∏–¥–∏–º—ñ –∫–æ–ª–∏ –º–∞—Å—à—Ç–∞–± –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î minScale
                if (config.maxScale !== undefined) {
                    element.style.opacity = this.scale <= config.maxScale ? '1' : '0';
                } else {
                    element.style.opacity = this.scale >= config.minScale ? '1' : '0';
                }
            });
        });
    }
    
    updateElementVisibility() {
        Object.keys(this.visibilityConfig).forEach(className => {
            const elements = this.svg.querySelectorAll(`.${className}`);
            const config = this.visibilityConfig[className];
            
            elements.forEach(element => {
                let shouldBeVisible;
                
                // –î–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ maxScale - –≤–∏–¥–∏–º—ñ –∫–æ–ª–∏ –º–∞—Å—à—Ç–∞–± –º–µ–Ω—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î maxScale
                // –î–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ minScale - –≤–∏–¥–∏–º—ñ –∫–æ–ª–∏ –º–∞—Å—à—Ç–∞–± –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î minScale
                if (config.maxScale !== undefined) {
                    shouldBeVisible = this.scale <= config.maxScale;
                } else {
                    shouldBeVisible = this.scale >= config.minScale;
                }
                
                element.style.opacity = shouldBeVisible ? '1' : '0';
                
                // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ pointer-events –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                element.style.pointerEvents = shouldBeVisible ? 'auto' : 'none';
            });
        });
    }
    
    initEventListeners() {
        // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        this.container.addEventListener('mousedown', this.onMouseDown.bind(this));
        this.container.addEventListener('mousemove', this.onMouseMove.bind(this));
        this.container.addEventListener('mouseup', this.onMouseUp.bind(this));
        this.container.addEventListener('mouseleave', this.onMouseUp.bind(this));
        
        // –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        this.container.addEventListener('wheel', this.onWheel.bind(this));
        
        // –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        document.getElementById('zoomIn').addEventListener('click', () => this.zoom(1.2));
        document.getElementById('zoomOut').addEventListener('click', () => this.zoom(0.8));
        document.getElementById('resetView').addEventListener('click', () => this.resetView());
        
        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
        this.container.addEventListener('contextmenu', (e) => e.preventDefault());
    }
    
    onMouseDown(e) {
        this.isDragging = true;
        this.lastMouseX = e.clientX;
        this.lastMouseY = e.clientY;
        this.container.style.cursor = 'url(../images2/cursorGrab/grabbing.png) 15 15, none';
    }
    
    onMouseMove(e) {
        if (!this.isDragging) return;
        
        const deltaX = e.clientX - this.lastMouseX;
        const deltaY = e.clientY - this.lastMouseY;
        
        this.translateX += deltaX;
        this.translateY += deltaY;
        
        this.lastMouseX = e.clientX;
        this.lastMouseY = e.clientY;
        
        this.updateTransform();
    }
    
    onMouseUp() {
        this.isDragging = false;
        this.container.style.cursor = 'url(../images2/cursorGrab/grab.png) 20 20, grab';
    }
    
    onWheel(e) {
        e.preventDefault();
        
        const rect = this.container.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        const mouseX = e.clientX - centerX;
        const mouseY = e.clientY - centerY;
        
        const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
        const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale * zoomFactor));
        
        if (newScale !== this.scale) {
            const scaleDiff = newScale / this.scale;
            this.translateX = this.translateX * scaleDiff - mouseX * (scaleDiff - 1);
            this.translateY = this.translateY * scaleDiff - mouseY * (scaleDiff - 1);
            this.scale = newScale;
            this.updateTransform();
        }
    }
    
    zoom(factor) {
        const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale * factor));
        if (newScale !== this.scale) {
            this.scale = newScale;
            this.updateTransform();
        }
    }

    resetView() {
        this.scale = 1;
        this.translateX = 0;
        this.translateY = 0;
        this.updateTransform();
    }
    
    updateTransform() {
        const transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
        this.svg.style.transform = transform;
        this.zoomInfo.textContent = `–ú–∞—Å—à—Ç–∞–±: ${Math.round(this.scale * 100)}%`;
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        this.updateElementVisibility();
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–∞–ª–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        this.updateFixedSizeElements();
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
const map = new InteractiveMap('mapContent');